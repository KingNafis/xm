% Parameters 
Fs = 10000;             
t = 0:1/Fs:0.01;        
fc = 1000;              
fm = 100;               
Am = 1;                 
Ac = 1;                 
kf = 2 * pi * 75;       
% Message signal 
% Sampling frequency (Hz) 
% Time vector (10 ms) 
% Carrier frequency (Hz) 
% Message frequency (Hz) 
% Message amplitude 
% Carrier amplitude 
% Frequency sensitivity (rad/s per unit amplitude) 
m = Am * cos(2 * pi * fm * t); 
% Integrate the message signal 
int_m = cumsum(m) / Fs; 
% FM signal 
s_fm = Ac * cos(2 * pi * fc * t + kf * int_m); 
% Plotting 
figure; 
subplot(3,1,1); 
plot(t, m); 
title('Message Signal'); 
xlabel('Time (s)'); 
ylabel('Amplitude'); 
subplot(3,1,2); 
plot(t, cos(2*pi*fc*t)); 
title('Carrier Signal'); 
xlabel('Time (s)'); 
ylabel('Amplitude'); 
subplot(3,1,3); 
plot(t, s_fm); 
title('FM Signal'); 
xlabel('Time (s)'); 
ylabel('Amplitude');





clc; 
clear; 
% Parameters 
f = 5;                  
fs = 100;               
t = 0:1/fs:1;           
x = sin(2*pi*f*t);      
% Quantization 
% Frequency of analog signal (Hz) 
% Sampling frequency (samples per second) 
% Time vector for 1 second 
% Original analog signal (sine wave) 
 % Number of bits per sample (e.g., 3 bits 
n_bits = 2;                     
? 8 levels) 
L = 2^n_bits;                   
x_min = min(x); x_max = max(x); 
 % Number of quantization levels 
q_step = (x_max - x_min) / (L - 1);   % Quantization step size 
% Uniform quantizer 
xq_index = round((x - x_min) / q_step);    
xq = xq_index * q_step + x_min;            
% Binary Encoding 
bin_pcm = dec2bin(xq_index, n_bits);       
matrix) 
% Plot original and quantized signal 
figure; 
plot(t, x, 'b', 'LineWidth', 1.5); 
hold on; 
stairs(t, xq, 'r', 'LineWidth', 1.5); 
xlabel('Time (s)'); 
ylabel('Amplitude'); 
title('PCM Encoding of a Sine Wave'); 
% Get quantization index 
% Quantized signal 
% Binary PCM values (as string 
legend('Original Signal', 'Quantized Signal'); 
grid on; 





% Parameters 
Fs = 10000;           
t = 0:1/Fs:0.01;       
fc = 1000;            
fm = 100;             
Am = 1;               
Ac = 1;               
mu = 0.5;             
modulation) 
% Message signal 
 % Sampling frequency (Hz) 
% Time vector (10 ms) 
 % Carrier frequency (Hz) 
 % Message frequency (Hz) 
 % Message amplitude 
 % Carrier amplitude 
 % Modulation index (0 < mu < 1 for under 
m = Am * cos(2 * pi * fm * t); 
% Carrier signal 
c = Ac * cos(2 * pi * fc * t); 
% AM signal 
s = (1 + mu * cos(2 * pi * fm * t)) .* c; 
% Plotting 
figure; 
subplot(3,1,1); 
plot(t, m); 
title('Message Signal'); 
xlabel('Time (s)'); 
ylabel('Amplitude'); 
subplot(3,1,2); 
plot(t, c); 
title('Carrier Signal'); 
xlabel('Time (s)'); 
ylabel('Amplitude'); 
subplot(3,1,3); 
plot(t, s); 
title('AM Modulated Signal'); 
xlabel('Time (s)'); 
ylabel('Amplitude'); 





clc; 
clear; 
% Parameters 
fs = 100;                   
t = 0:1/fs:1;               
x = sin(2*pi*5*t);          
delta = 0.2;                
% Initialization 
x_dm = zeros(size(x));      
 % Sampling frequency 
 % Time vector 
 % Input signal (sine wave) 
 % Step size 
 % Delta modulated signal (reconstructed) 
bitstream = zeros(size(x));  % Output bitstream (0 or 1) 
for i = 2:length(x) 
if x(i) > x_dm(i-1) 
bitstream(i) = 1; 
x_dm(i) = x_dm(i-1) + delta; 
else 
bitstream(i) = 0; 
x_dm(i) = x_dm(i-1) - delta; 
end 
end 
% Plot input and reconstructed signal 
figure; 
plot(t, x, 'b', 'LineWidth', 1.5); hold on; 
stairs(t, x_dm, 'r', 'LineWidth', 1.5); 
xlabel('Time (s)'); 
ylabel('Amplitude'); 
title('Delta Modulation of a Sine Wave'); 
legend('Original Signal', 'Delta Modulated Reconstruction'); 
grid on; 





clc; 
clear; 
% Input binary data 
data = [1 0 1 1 0 0 1 0]; 
% Bit and sampling specs 
bit_duration = 1;     
fs = 100;              
 % in seconds 
% sampling frequency (Hz) 
t = 0:1/fs:bit_duration - 1/fs;  % time vector for one bit 
N = length(data);     
 % number of bits 
% Full signal time vector 
time = 0:1/fs:bit_duration*N - 1/fs; 
% Signal initialization 
polar_nrz = []; 
% Generate the Polar NRZ waveform 
for i = 1:N 
if data(i) == 1 
polar_nrz = [polar_nrz ones(1, length(t))];    
else 
% +1 V for bit 1 
polar_nrz = [polar_nrz -ones(1, length(t))];   % -1 V for bit 0 
end 
end 
% Plotting 
figure; 
plot(time, polar_nrz, 'LineWidth', 2); 
axis([0 bit_duration*N -1.5 1.5]); 
grid on; 
xlabel('Time (s)'); 
ylabel('Amplitude (V)'); 
title('Polar NRZ Line Coding'); 
xticks(0:bit_duration:N); 
yticks([-1 0 1]); 





clc; 
clear; 
% Input binary data 
data = [1 0 1 1 0 0 1 0]; 
% Bit and sampling specs 
bit_duration = 1;     
fs = 100;             
% duration of one bit in seconds 
% samples per second 
samples_per_bit = fs * bit_duration; 
half_samples = samples_per_bit / 2; 
 
% Time vector for full signal 
time = 0:1/fs:(length(data)*bit_duration) - 1/fs; 
 
% Generate the Polar RZ waveform 
polar_rz = []; 
 
for i = 1:length(data) 
    if data(i) == 1 
        % +1 V for first half, 0 V for second half 
        bit_wave = [ones(1, half_samples), zeros(1, half_samples)]; 
    else 
        % -1 V for first half, 0 V for second half 
        bit_wave = [-ones(1, half_samples), zeros(1, half_samples)]; 
    end 
    polar_rz = [polar_rz bit_wave];  % append the waveform for this bit 
end 
 
% Plot the Polar RZ signal 
figure; 
plot(time, polar_rz, 'LineWidth', 2); 
axis([0 length(data) * bit_duration -1.5 1.5]); 
grid on; 
xlabel('Time (s)'); 
ylabel('Amplitude (V)'); 
title('Polar RZ Line Coding'); 
xticks(0:bit_duration:length(data)); 
yticks([-1 0 1]); 
 
 
 
 
 
clc; 
clear; 
 
% Input binary data 
data = [1 0 1 1 0 0 1 0]; 
 
% Bit specifications 
bit_duration = 1;  % duration of one bit (in seconds) 
fs = 100;          % sampling frequency in Hz 
t = 0:1/fs:bit_duration - 1/fs;  % time vector for 1 bit 
N = length(data);  % number of bits 
 
% Time vector for entire signal 
time = 0:1/fs:bit_duration*N - 1/fs; 
 
% Signal generation 
unipolar_nrz = []; 
for i = 1:N 
if data(i) == 1 
unipolar_nrz = [unipolar_nrz ones(1, length(t))];  % High for '1' 
else 
end 
end 
unipolar_nrz = [unipolar_nrz zeros(1, length(t))]; % Low for '0' 
% Plotting 
figure; 
plot(time, unipolar_nrz, 'LineWidth', 2); 
axis([0 bit_duration*N 0 1]); 
grid on; 
xlabel('Time (s)'); 
ylabel('Amplitude'); 
title('Unipolar NRZ Line Coding'); 
xticks(0:bit_duration:N); 
yticks([0 1]); 






clc; 
clear; 
 
% Input binary data 
data = [1 0 1 1 0 1 0 0 1]; 
 
% Bit and sampling specifications 
bit_duration = 1;      % duration of one bit in seconds 
fs = 100;              % sampling frequency in Hz 
samples_per_bit = fs * bit_duration; 
 
% Time vector for full signal 
time = 0:1/fs:(length(data)*bit_duration) - 1/fs; 
 
% Initialize signal 
ami = []; 
last_polarity = -1;  % Initialize to -1 so first '1' becomes +1 
 
for i = 1:length(data) 
    if data(i) == 1 
        last_polarity = -last_polarity;  % Alternate polarity 
        bit_wave = last_polarity * ones(1, samples_per_bit); 
    else 
        bit_wave = zeros(1, samples_per_bit); 
    end 
    ami = [ami bit_wave]; 
end 
 
% Plotting 
figure; 
plot(time, ami, 'LineWidth', 2); 
axis([0 length(data) * bit_duration -1.5 1.5]); 
grid on; 
xlabel('Time (s)'); 
ylabel('Amplitude (V)'); 
title('Bipolar AMI (Alternate Mark Inversion) Line Coding'); 
xticks(0:bit_duration:length(data)); 
yticks([-1 0 1]); 
 
 
 
 
 
 
 
 
 
clc; 
clear; 
% Input binary data (length must be even for 2-bit grouping) 
data = [1 0 0 0 1 1 0 1];  % 8 bits = 4 symbols 
% Check length 
if mod(length(data), 2) ~= 0 
error('Input data length must be even for 2B1Q.'); 
end 
% Bit and symbol specs 
fs = 100;               
symbol_duration = 1;    
% samples per second 
% seconds per symbol (2 bits per symbol) 
samples_per_symbol = fs * symbol_duration; 
% Time vector for full signal 
num_symbols = length(data) / 2; 
time = 0:1/fs:(num_symbols * symbol_duration) - 1/fs; 
% 2B1Q Mapping Table 
map = containers.Map({'00', '01', '10', '11'}, [-3, -1, 1, 3]); 
% Generate 2B1Q waveform 
twoB1Q = []; 
for i = 1:2:length(data) 
pair = sprintf('%d%d', data(i), data(i+1)); 
level = map(pair); 
twoB1Q = [twoB1Q level * ones(1, samples_per_symbol)]; 
end 
% Plotting 
figure; 
plot(time, twoB1Q, 'LineWidth', 2); 
axis([0 num_symbols * symbol_duration -3.5 3.5]); 
grid on; 
xlabel('Time (s)'); 
ylabel('Amplitude (V)'); 
title('2B1Q (2 Binary 1 Quaternary) Line Coding'); 
xticks(0:symbol_duration:num_symbols); 
yticks([-3 -1 0 1 3]); 






 
clc; 
clear; 
 
% Input binary data 
data = [1 0 1 1 0 0 1 0]; 
 
% Bit and sampling parameters 
bit_duration = 1;     % seconds 
fs = 100;             % samples per second 
samples_per_bit = fs * bit_duration; 
half_samples = samples_per_bit / 2; 
 
% Time vector for full signal 
time = 0:1/fs:(length(data)*bit_duration) - 1/fs; 
 
% Initialize Manchester waveform 
manchester = []; 
 
for i = 1:length(data) 
    if data(i) == 1 
        % Bit 1: High to Low 
        bit_wave = [ones(1, half_samples), -ones(1, half_samples)]; 
    else 
        % Bit 0: Low to High 
        bit_wave = [-ones(1, half_samples), ones(1, half_samples)]; 
    end 
    manchester = [manchester bit_wave]; 
end 
 
% Plot Manchester waveform 
figure; 
plot(time, manchester, 'LineWidth', 2); 
axis([0 length(data)*bit_duration -1.5 1.5]); 
grid on; 
xlabel('Time (s)'); 
ylabel('Amplitude (V)'); 
title('Polar Biphase (Manchester) Line Coding'); 
xticks(0:bit_duration:length(data)); 
yticks([-1 0 1]);
